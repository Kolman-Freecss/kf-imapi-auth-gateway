{
	"info": {
		"_postman_id": "6940b093-c80d-48bf-8de3-972f57a940d2",
		"name": "KF-IMAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5372028"
	},
	"item": [
		{
			"name": "Incident service",
			"item": [
				{
					"name": "Gateway - Get All incidences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<canvas id=\"myChart\" height=\"75\"></canvas>\r",
									"\r",
									"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js\"></script> \r",
									"\r",
									"<script>\r",
									"    var ctx = document.getElementById(\"myChart\");\r",
									"\r",
									"    var myChart = new Chart(ctx, {\r",
									"        type: \"bar\",\r",
									"        data: {\r",
									"            labels: [],\r",
									"            datasets: [{\r",
									"                data: [],\r",
									"                \r",
									"                // Change these colours to customize the chart\r",
									"                backgroundColor: [\"#003f5c\", \"#58508d\", \"#bc5090\", \"#ff6361\", \"#ffa600\"],\r",
									"            }]\r",
									"        },\r",
									"        options: {\r",
									"            legend: { display: false },\r",
									"            title: {\r",
									"                display: true,\r",
									"                text: 'Incident Status'\r",
									"            },\r",
									"            scales: {\r",
									"                xAxes: [{\r",
									"                    display: true,\r",
									"                    scaleLabel: {\r",
									"                        display: true,\r",
									"                        labelString: 'Incident ID'\r",
									"                    }\r",
									"                }],\r",
									"                yAxes: [{\r",
									"                    display: true,\r",
									"                    scaleLabel: {\r",
									"                        display: true,\r",
									"                        labelString: 'Count'\r",
									"                    }\r",
									"                }]\r",
									"            }\r",
									"        }\r",
									"\r",
									"    });\r",
									"\r",
									"    // Access the data passed to pm.visualizer.set() from the JavaScript\r",
									"    // code of the Visualizer template\r",
									"    pm.getData(function (err, value) {\r",
									"        myChart.data.datasets[0].data = value.response.dtoData.map((item) => item.id);\r",
									"        myChart.data.labels = value.response.dtoData.map((item) => item.status);\r",
									"        myChart.update();\r",
									"    });\r",
									"\r",
									"</script>`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    var res = pm.response.json();\r",
									"    \r",
									"    var visualizerData = {\r",
									"        \r",
									"        // Labels take an array of strings\r",
									"        labels: res.dtoData.map((item) => item.status),\r",
									"        \r",
									"        // Data takes an array of numbers\r",
									"        data: res.dtoData.map((item) => item.id)\r",
									"    };\r",
									"\r",
									"    return {response: visualizerData};\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Internal-Auth",
								"value": "1234",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8084/api/v1/incident/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8084",
							"path": [
								"api",
								"v1",
								"incident",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Gateway - Get IncidenceById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<canvas id=\"myChart\" height=\"75\"></canvas>\r",
									"\r",
									"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js\"></script> \r",
									"\r",
									"<script>\r",
									"    var ctx = document.getElementById(\"myChart\");\r",
									"\r",
									"    var myChart = new Chart(ctx, {\r",
									"        type: \"bar\",\r",
									"        data: {\r",
									"            labels: [],\r",
									"            datasets: [{\r",
									"                data: [],\r",
									"                \r",
									"                // Change these colours to customize the chart\r",
									"                backgroundColor: [\"#003f5c\", \"#58508d\", \"#bc5090\", \"#ff6361\", \"#ffa600\"],\r",
									"            }]\r",
									"        },\r",
									"        options: {\r",
									"            legend: { display: false },\r",
									"            title: {\r",
									"                display: true,\r",
									"                text: 'Incident Status'\r",
									"            },\r",
									"            scales: {\r",
									"                xAxes: [{\r",
									"                    display: true,\r",
									"                    scaleLabel: {\r",
									"                        display: true,\r",
									"                        labelString: 'Incident ID'\r",
									"                    }\r",
									"                }],\r",
									"                yAxes: [{\r",
									"                    display: true,\r",
									"                    scaleLabel: {\r",
									"                        display: true,\r",
									"                        labelString: 'Count'\r",
									"                    }\r",
									"                }]\r",
									"            }\r",
									"        }\r",
									"\r",
									"    });\r",
									"\r",
									"    // Access the data passed to pm.visualizer.set() from the JavaScript\r",
									"    // code of the Visualizer template\r",
									"    pm.getData(function (err, value) {\r",
									"        myChart.data.datasets[0].data = value.response.dtoData.map((item) => item.id);\r",
									"        myChart.data.labels = value.response.dtoData.map((item) => item.status);\r",
									"        myChart.update();\r",
									"    });\r",
									"\r",
									"</script>`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    var res = pm.response.json();\r",
									"    \r",
									"    var visualizerData = {\r",
									"        \r",
									"        // Labels take an array of strings\r",
									"        labels: res.dtoData.map((item) => item.status),\r",
									"        \r",
									"        // Data takes an array of numbers\r",
									"        data: res.dtoData.map((item) => item.id)\r",
									"    };\r",
									"\r",
									"    return {response: visualizerData};\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Internal-Auth",
								"value": "1234",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8084/incident/api/v1/incident/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8084",
							"path": [
								"incident",
								"api",
								"v1",
								"incident",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gateway Prometheus metrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<canvas id=\"myChart\" height=\"75\"></canvas>\r",
									"\r",
									"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js\"></script> \r",
									"\r",
									"<script>\r",
									"    var ctx = document.getElementById(\"myChart\");\r",
									"\r",
									"    var myChart = new Chart(ctx, {\r",
									"        type: \"bar\",\r",
									"        data: {\r",
									"            labels: [],\r",
									"            datasets: [{\r",
									"                data: [],\r",
									"                \r",
									"                // Change these colours to customize the chart\r",
									"                backgroundColor: [\"#003f5c\", \"#58508d\", \"#bc5090\", \"#ff6361\", \"#ffa600\"],\r",
									"            }]\r",
									"        },\r",
									"        options: {\r",
									"            legend: { display: false },\r",
									"            title: {\r",
									"                display: true,\r",
									"                text: 'Incident Status'\r",
									"            },\r",
									"            scales: {\r",
									"                xAxes: [{\r",
									"                    display: true,\r",
									"                    scaleLabel: {\r",
									"                        display: true,\r",
									"                        labelString: 'Incident ID'\r",
									"                    }\r",
									"                }],\r",
									"                yAxes: [{\r",
									"                    display: true,\r",
									"                    scaleLabel: {\r",
									"                        display: true,\r",
									"                        labelString: 'Count'\r",
									"                    }\r",
									"                }]\r",
									"            }\r",
									"        }\r",
									"\r",
									"    });\r",
									"\r",
									"    // Access the data passed to pm.visualizer.set() from the JavaScript\r",
									"    // code of the Visualizer template\r",
									"    pm.getData(function (err, value) {\r",
									"        myChart.data.datasets[0].data = value.response.dtoData.map((item) => item.id);\r",
									"        myChart.data.labels = value.response.dtoData.map((item) => item.status);\r",
									"        myChart.update();\r",
									"    });\r",
									"\r",
									"</script>`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    var res = pm.response.json();\r",
									"    \r",
									"    var visualizerData = {\r",
									"        \r",
									"        // Labels take an array of strings\r",
									"        labels: res.dtoData.map((item) => item.status),\r",
									"        \r",
									"        // Data takes an array of numbers\r",
									"        data: res.dtoData.map((item) => item.id)\r",
									"    };\r",
									"\r",
									"    return {response: visualizerData};\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Internal-Auth",
								"value": "1234",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8084/incident/actuator/prometheus",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8084",
							"path": [
								"incident",
								"actuator",
								"prometheus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Prometheus metrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<canvas id=\"myChart\" height=\"75\"></canvas>\r",
									"\r",
									"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js\"></script> \r",
									"\r",
									"<script>\r",
									"    var ctx = document.getElementById(\"myChart\");\r",
									"\r",
									"    var myChart = new Chart(ctx, {\r",
									"        type: \"bar\",\r",
									"        data: {\r",
									"            labels: [],\r",
									"            datasets: [{\r",
									"                data: [],\r",
									"                \r",
									"                // Change these colours to customize the chart\r",
									"                backgroundColor: [\"#003f5c\", \"#58508d\", \"#bc5090\", \"#ff6361\", \"#ffa600\"],\r",
									"            }]\r",
									"        },\r",
									"        options: {\r",
									"            legend: { display: false },\r",
									"            title: {\r",
									"                display: true,\r",
									"                text: 'Incident Status'\r",
									"            },\r",
									"            scales: {\r",
									"                xAxes: [{\r",
									"                    display: true,\r",
									"                    scaleLabel: {\r",
									"                        display: true,\r",
									"                        labelString: 'Incident ID'\r",
									"                    }\r",
									"                }],\r",
									"                yAxes: [{\r",
									"                    display: true,\r",
									"                    scaleLabel: {\r",
									"                        display: true,\r",
									"                        labelString: 'Count'\r",
									"                    }\r",
									"                }]\r",
									"            }\r",
									"        }\r",
									"\r",
									"    });\r",
									"\r",
									"    // Access the data passed to pm.visualizer.set() from the JavaScript\r",
									"    // code of the Visualizer template\r",
									"    pm.getData(function (err, value) {\r",
									"        myChart.data.datasets[0].data = value.response.dtoData.map((item) => item.id);\r",
									"        myChart.data.labels = value.response.dtoData.map((item) => item.status);\r",
									"        myChart.update();\r",
									"    });\r",
									"\r",
									"</script>`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    var res = pm.response.json();\r",
									"    \r",
									"    var visualizerData = {\r",
									"        \r",
									"        // Labels take an array of strings\r",
									"        labels: res.dtoData.map((item) => item.status),\r",
									"        \r",
									"        // Data takes an array of numbers\r",
									"        data: res.dtoData.map((item) => item.id)\r",
									"    };\r",
									"\r",
									"    return {response: visualizerData};\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Internal-Auth",
								"value": "1234",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8082/actuator/prometheus",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"actuator",
								"prometheus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All incidences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<canvas id=\"myChart\" height=\"75\"></canvas>\r",
									"\r",
									"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js\"></script> \r",
									"\r",
									"<script>\r",
									"    var ctx = document.getElementById(\"myChart\");\r",
									"\r",
									"    var myChart = new Chart(ctx, {\r",
									"        type: \"bar\",\r",
									"        data: {\r",
									"            labels: [],\r",
									"            datasets: [{\r",
									"                data: [],\r",
									"                \r",
									"                // Change these colours to customize the chart\r",
									"                backgroundColor: [\"#003f5c\", \"#58508d\", \"#bc5090\", \"#ff6361\", \"#ffa600\"],\r",
									"            }]\r",
									"        },\r",
									"        options: {\r",
									"            legend: { display: false },\r",
									"            title: {\r",
									"                display: true,\r",
									"                text: 'Incident Status'\r",
									"            },\r",
									"            scales: {\r",
									"                xAxes: [{\r",
									"                    display: true,\r",
									"                    scaleLabel: {\r",
									"                        display: true,\r",
									"                        labelString: 'Incident ID'\r",
									"                    }\r",
									"                }],\r",
									"                yAxes: [{\r",
									"                    display: true,\r",
									"                    scaleLabel: {\r",
									"                        display: true,\r",
									"                        labelString: 'Count'\r",
									"                    }\r",
									"                }]\r",
									"            }\r",
									"        }\r",
									"\r",
									"    });\r",
									"\r",
									"    // Access the data passed to pm.visualizer.set() from the JavaScript\r",
									"    // code of the Visualizer template\r",
									"    pm.getData(function (err, value) {\r",
									"        myChart.data.datasets[0].data = value.response.dtoData.map((item) => item.id);\r",
									"        myChart.data.labels = value.response.dtoData.map((item) => item.status);\r",
									"        myChart.update();\r",
									"    });\r",
									"\r",
									"</script>`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    var res = pm.response.json();\r",
									"    \r",
									"    var visualizerData = {\r",
									"        \r",
									"        // Labels take an array of strings\r",
									"        labels: res.dtoData.map((item) => item.status),\r",
									"        \r",
									"        // Data takes an array of numbers\r",
									"        data: res.dtoData.map((item) => item.id)\r",
									"    };\r",
									"\r",
									"    return {response: visualizerData};\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Internal-Auth",
								"value": "1234",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8082/api/v1/incident/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"api",
								"v1",
								"incident",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Keycloak",
			"item": [
				{
					"name": "Gateway Get Keycloak Token",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "imapi-gateway",
									"type": "text"
								},
								{
									"key": "username",
									"value": "user",
									"type": "text"
								},
								{
									"key": "password",
									"value": "user",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8084/api/v1/auth/realms/imapi/protocol/openid-connect/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8084",
							"path": [
								"api",
								"v1",
								"auth",
								"realms",
								"imapi",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API Spring Dummy Request Admin",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer ",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8084/byeAdmin",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8084",
					"path": [
						"byeAdmin"
					]
				}
			},
			"response": []
		},
		{
			"name": "API Spring Dummy Request User",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer ",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8084/hello",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8084",
					"path": [
						"hello"
					]
				}
			},
			"response": []
		},
		{
			"name": "API Spring Dummy Request No user",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8084/auth/hello",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8084",
					"path": [
						"auth",
						"hello"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Keycloak Token",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_id",
							"value": "imapi-gateway",
							"type": "text"
						},
						{
							"key": "username",
							"value": "user",
							"type": "text"
						},
						{
							"key": "password",
							"value": "user",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:9091/realms/imapi/protocol/openid-connect/token",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9091",
					"path": [
						"realms",
						"imapi",
						"protocol",
						"openid-connect",
						"token"
					]
				}
			},
			"response": []
		}
	]
}